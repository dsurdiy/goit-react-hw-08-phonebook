{"version":3,"file":"static/js/537.4e2f735b.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactEditor/ContactEditor.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["const getContacts = state => state.contacts.items;\nconst getIsLoading = state => state.contacts.loading;\n\nconst contactsSelectors = {\n  getContacts,\n  getIsLoading,\n};\n\nexport default contactsSelectors;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 90%;\n  margin: 0 auto;\n  margin-bottom: 30px;\n\n  label {\n    display: block;\n    align-items: center;\n    margin-bottom: 15px;\n    font-size: 24px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  display: block;\n  width: 100%;\n  margin-top: 15px;\n  padding: 10px;\n  height: 40px;\n  border: none;\n  outline: 1px solid black;\n  border-radius: 10px;\n  font-size: 18px;\n\n  :focus {\n    outline: 2px solid tomato;\n  }\n`;\n\nexport const AddContactBtn = styled.button`\n  display: block;\n  width: 50%;\n  height: 40px;\n  margin: 0 auto;\n  border-radius: 10px;\n  border: none;\n  background-color: tomato;\n  font-size: 20px;\n  cursor: pointer;\n  transition: all 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: #a33c2a;\n    color: #ffffff;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { IoMdContact } from 'react-icons/io';\nimport { BsFillPhoneFill } from 'react-icons/bs';\nimport { Form, FormInput, AddContactBtn } from './ContactForm.styled';\n\nexport const ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleNameChange = e => {\n    const newName = e.target.value;\n    setName(newName);\n  };\n\n  const handleNumberChange = e => {\n    const newNumber = e.target.value;\n    setNumber(newNumber);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { name, number };\n    onSubmit(newContact);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <IoMdContact size={20} fill=\"tomato\" /> Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        <BsFillPhoneFill size={18} fill=\"tomato\" /> Number\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleNumberChange}\n        />\n      </label>\n      <AddContactBtn type=\"submit\">Add contact</AddContactBtn>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const Content = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  max-width: 600px;\n  width: 100%;\n  padding: 12px;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Overlay, Content } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleOverlayClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleOverlayClick}>\n      <Content>{children}</Content>\n    </Overlay>,\n    modalRoot\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { MdClose } from 'react-icons/md';\nimport contactsOperations from 'redux/contacts/contacts-operations';\n\nexport const ContactEditor = ({ id, name, number, onClose }) => {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const data = new FormData(e.currentTarget);\n\n    const updatedContact = {\n      id,\n      name: data.get('name'),\n      number: data.get('number'),\n    };\n\n    dispatch(contactsOperations.updateContact(updatedContact));\n    onClose();\n  };\n\n  return (\n    <div>\n      <p>\n        <span>Update contact</span>\n        <button type=\"button\" onClick={() => onClose()}>\n          <MdClose />\n        </button>\n      </p>\n      <form onSubmit={handleFormSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder={name}\n          />\n        </label>\n        <label>\n          Nubmer\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder={number}\n          />\n        </label>\n        <button type=\"submit\">Save changes</button>\n      </form>\n    </div>\n  );\n};\n\n// Прописати пропи\n\n// Contact.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n// };\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n`;\n\nexport const ContactInfo = styled.a`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  padding: 10px;\n  margin-right: 40px;\n  color: inherit;\n  text-decoration: none;\n  cursor: pointer;\n\n  span {\n    display: flex;\n    align-items: center;\n\n    svg {\n      margin-right: 10px;\n    }\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  display: block;\n  margin: 0 auto;\n  border-radius: 10px;\n  border: none;\n  background-color: #d37b7b;\n  cursor: pointer;\n  transition: all 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: #a33c2a;\n    color: #ffffff;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { GrContactInfo } from 'react-icons/gr';\nimport { BiPhone } from 'react-icons/bi';\nimport { Modal } from 'components/Modal/Modal';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ContactWrapper, ContactInfo, DeleteBtn } from './Contact.styled';\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport contactsSelectors from 'redux/contacts/contacts-selectors';\n\nexport const Contact = ({ id, name, number }) => {\n  const [isShowModal, setIsShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n\n  const handleDeleteContact = id => {\n    try {\n      dispatch(contactsOperations.deleteContact(id));\n      toast.info(`Contact ${name} deleted!`);\n    } catch (error) {\n      toast.error('Something went wrong :(');\n    }\n  };\n\n  const handleOpenEditor = e => {\n    e.preventDefault();\n    setIsShowModal(true);\n  };\n\n  const handleCloseModal = () => setIsShowModal(false);\n\n  return (\n    <>\n      <ContactWrapper>\n        <ContactInfo onClick={handleOpenEditor}>\n          <span>\n            <GrContactInfo />\n            {name}\n          </span>\n          <span>\n            <BiPhone />\n            {number}\n          </span>\n        </ContactInfo>\n\n        <DeleteBtn\n          type=\"button\"\n          disabled={isLoading}\n          onClick={() => handleDeleteContact(id)}\n        >\n          Delete\n        </DeleteBtn>\n      </ContactWrapper>\n\n      {isShowModal && (\n        <Modal onClose={handleCloseModal}>\n          <ContactEditor\n            id={id}\n            name={name}\n            number={number}\n            onClose={handleCloseModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Contacts = styled.ul`\n  width: 90%;\n  margin: 0 auto;\n  font-size: 20px;\n`;\n\nexport const ContactsItem = styled.li`\n  border-radius: 10px;\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\n\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Contact } from 'components/Contact/Contact';\nimport { Contacts, ContactsItem } from './ContactList.styled';\n\nexport const ContactList = ({ contacts }) => {\n  return (\n    <Contacts>\n      {contacts.map(({ id, name, number }) => (\n        <ContactsItem key={id}>\n          <Contact id={id} name={name} number={number} />\n        </ContactsItem>\n      ))}\n    </Contacts>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  display: block;\n  width: 90%;\n  margin: 0 auto;\n  margin-bottom: 30px;\n  text-align: center;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: 70%;\n  margin: 0 auto;\n  margin-top: 10px;\n  padding: 10px;\n  height: 40px;\n  border: none;\n  outline: 1px solid black;\n  border-radius: 10px;\n  font-size: 18px;\n\n  :focus {\n    outline: 2px solid tomato;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = ({ value, onChange }) => {\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n      />\n    </FilterLabel>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport contactsSelectors from 'redux/contacts/contacts-selectors';\nimport { changeFilter } from 'redux/filterSlice';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(state => state.filter);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  const formSubmitHandler = newContact => {\n    const normalizedNewContactsName = newContact.name.toLowerCase();\n    const existingСontact = contacts.find(\n      ({ name }) => name.toLowerCase() === normalizedNewContactsName\n    );\n\n    if (existingСontact) {\n      return toast.warn(`${newContact.name} is already in contacts`);\n    }\n\n    try {\n      dispatch(contactsOperations.addContact(newContact));\n      toast.success(`${newContact.name} successfully added :)`);\n    } catch (error) {\n      toast.error('Something went wrong :(');\n    }\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const handleFilterChange = e => {\n    const newFilter = e.target.value;\n    dispatch(changeFilter(newFilter));\n  };\n\n  const isContacts = getFilteredContacts().length !== 0;\n\n  return (\n    <>\n      <ContactForm onSubmit={formSubmitHandler} />\n\n      <h2>Contacts</h2>\n\n      <Filter value={filter} onChange={handleFilterChange} />\n\n      <ContactList contacts={getFilteredContacts()} />\n\n      {/* {isLoading ? (\n        <FallingLines\n          color=\"#ff7043\"\n          width=\"150\"\n          visible={true}\n          ariaLabel=\"falling-lines-loading\"\n        />\n      ) : (\n        <ContactList contacts={getFilteredContacts()} />\n      )} */}\n      {!isContacts && <b>There are no contacts...</b>}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","items","getIsLoading","loading","Form","styled","FormInput","AddContactBtn","ContactForm","onSubmit","useState","name","setName","number","setNumber","e","preventDefault","size","fill","type","pattern","title","required","value","onChange","newName","target","newNumber","Overlay","Content","modalRoot","document","querySelector","Modal","children","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","onClick","currentTarget","ContactEditor","id","dispatch","useDispatch","data","FormData","updatedContact","get","contactsOperations","placeholder","ContactWrapper","ContactInfo","DeleteBtn","Contact","isShowModal","setIsShowModal","isLoading","useSelector","contactsSelectors","handleCloseModal","disabled","toast","error","handleDeleteContact","Contacts","ContactsItem","ContactList","map","FilterLabel","FilterInput","Filter","filter","getFilteredContacts","normalizedFilter","toLowerCase","trim","includes","isContacts","length","newContact","normalizedNewContactsName","find","newFilter","changeFilter"],"sourceRoot":""}